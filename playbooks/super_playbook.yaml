# Este es mi fichero de playbooks
--- # Crear un nuevo play
# Contra quien opero
- hosts: all

  # Opciones de conexión
  remote_user: root
  order: inventory # reverse_inventory, sorted, reverse_sorted, shuffle
  
# Ansible ejecuta las tareas de manera secuencial pero en paralelo en diferentes entornos, de 5 en 5 por defecto.

  # Variables TODO
  vars:
        variable1: Hola amigo!!
        variable2: 22
        variable3:
            subvalor1: 1
            subvalor2: 2
        
  # Comienza la definición de tareas
  tasks:
  
    # Comienza una tarea
    - name: Mi primera tarea
      debug:
            # Si quiero usar variables, van entre llaves dobles y entre comillas.
            msg: "{{ variable1}} voy a comenzar una tarea"
            
    # Comienza otra tarea
    - name: Mi segunda tarea
      debug:
            # !unsefe evita que un texto se procese por JINJA
            msg: !unsafe "En ninja va todo por dobles llaves {{ aqui va mi variable }}"
            
    # Comienza otra tarea            
    - name: Mi tercera tarea
      debug:
            # 
            msg: "{{ variable1 }} voy a comenzar la tarea {{ numerotarea }}, en el servidor {{ sistema }} {{ sistema2 }}"
      vars:
            numerotarea: 3
            
    # Comienza otra tarea con variables de diccionario          
    - name: Mi cuarta tarea
      debug:
            msg: "Valores del diccionario {{ variable3.subvalor2 }}"

    # Comienza otra tarea para obtener facts          
    - name: Mi tarea de facts
      debug:
            #msg: "{{ ansible_facts }}" haría lo mismo.
            var: ansible_facts.dns.nameservers[0]

    # Mi primera tarea condicional
    - name: Mi tarea condicional
      debug:
            msg: "He entrado !!!!!"
      # when: ansible_facts.distribution == 'Ubuntu' and variable2 == 22
      # when: ansible_facts.distribution == 'Ubuntu' or variable2 == 22
      when:
        - ansible_facts.distribution == 'Ubuntu'
        - variable2 == 22

    # Una tarea normalita          
    - name: Mi tarea normalita 1
      debug:
            msg: "Me ejecuto normalmente 1"
      changed_when: False  # Solo funciona si ha habido una tarea cambiante.
      notify: tarea opcional 1
      
     # Una tarea normalita          
    - name: Mi tarea normalita 2
      debug:
            msg: "Me ejecuto normalmente 2"
      changed_when: True # Solo funciona si ha habido una tarea cambiante.
      notify: mievento

     # Una tarea que explota          
    - name: Mi tarea explosiva
      shell:
            cmd: umane
      ignore_errors: True
      failed_when: explosiva.rc > 100
      register: explosiva
      
    - name: Otra tarea
      debug:
            msg: "{{ explosiva.stdout }}"
      when:
        explosiva.rc == 0

### Expresiones para utilizar en el when: when, failed_when, changed_when
#   Expersiones sobre tareas que se han ejecutado:
#   explosiva is failed
#   explosiva is succeded
#   explosiva is skipped
#   explosiva is changed
#
#   Otras expresiones útiles sobre variables (incluyendo tareas que se hayan ejecutado):
#   mivariable is defined
#   mivariable is undefined or mivariable == False
#
#

    - name: Tarea comprobadora
      debug:
            msg: El mensaje de error de la tarea explosiva contiene 'not found'
      # when: "explosiva.stderr == '/bin/sh: 1: umane: not found'"
      #when: "'not found' in explosiva.stderr"  # Lo contrario sería con el not in
      #when: "'found' not in explosiva.stderr"
      #when: explosiva.stderr is search("n.t f..nd")
      when: explosiva.stderr is match(".*not.*")
      
     # Nuestra primera tarea en bucle !!!!!          
    - name: Primer bucle
      debug:
            msg: "Veamos las CPS: {{ item | upper }}"
      loop:  "{{ ansible_facts.processor }}"
      loop_control:
        index_var: cpus
      when: (cpus+1) % 3 == 0
      
      
      
      
      
       
  handlers:
      # Una tarea opcional  
    - name: tarea opcional 1
      debug:
            msg: "Me ejecuto opcionalmente 1"
      listen: mievento
            
    - name: tarea opcional 2
      debug:
            msg: "Me ejecuto opcionalmente 2"
      listen: mievento